version: '3'

includes:
  native: native
  cc: cc
  rpi: rpi

tasks:
  copy-asterisk-headers:
    internal: true
    requires:
      vars: [REPO_DIR, DEST_DIR]
    cmds:
      - mkdir -p {{.DEST_DIR}}
      - cmd: cp {{.REPO_DIR}}/asterisk-headers.tar {{.DEST_DIR}}
        ignore_error: true
      - cmd: cp {{.REPO_DIR}}/asterisk-headers.tar.* {{.DEST_DIR}}
        ignore_error: true

  native:
    desc: Build chan_quectel
    requires:
      vars: [OSNAME, ASTERISK_VERSION_NUM]
    vars:
      TMP_DIR:
        sh: mktemp -d --suffix={{randInt 0 10}}
      GIT_BRANCH:
        sh: git branch --show-current
      REPO_DIR:
        sh: git rev-parse --show-toplevel
      IMG_NAME: 'asterisk-dev/chan-quectel:{{.OSNAME}}'
    cmds:
    - task: native:build-img
      vars:
        TARGET: chan-quectel
        IMG_NAME: '{{.IMG_NAME}}'
        IID_FILE: '{{.TMP_DIR}}/img-base.id'
    - task: copy-asterisk-headers
      vars:
        REPO_DIR: '{{.REPO_DIR}}'
        DEST_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: native:build-from-{{or .SOURCE_LOCATION "repo"}}
      vars:
        BASEIMG: '{{.IMG_NAME}}'
        PRESET: deb
        BRANCH: '{{.GIT_BRANCH}}'
        IID_FILE: '{{.TMP_DIR}}/img.id'
        ASTERISK_VERSION_NUM: '{{.ASTERISK_VERSION_NUM}}'
        SOURCES_DIR: '{{.REPO_DIR}}'
        AST_HEADER_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: copy-pkgs
      vars:
        DST_DIR: ''
        DOCKER_IMG:
          sh: cat {{.TMP_DIR}}/img.id
    - defer: rm -rf {{.TMP_DIR}}
    - defer: docker image rm $(cat {{.TMP_DIR}}/img.id) > /dev/null

  platform:
    desc: Build chan_quectel
    requires:
      vars: [OSNAME, ASTERISK_VERSION_NUM, DOCKER_PLATFORM]
    vars:
      TMP_DIR:
        sh: mktemp -d --suffix={{randInt 0 10}}
      GIT_BRANCH:
        sh: git branch --show-current
      REPO_DIR:
        sh: git rev-parse --show-toplevel        
      IMG_NAME: 'asterisk-dev/chan-quectel:{{.OSNAME}}'
    cmds:
    - task: native:build-img
      vars:
        TARGET: chan-quectel
        IMG_NAME: '{{.IMG_NAME}}'
        IID_FILE: '{{.TMP_DIR}}/img-base.id'
        DOCKER_PLATFORM: '{{.DOCKER_PLATFORM}}'
    - task: copy-asterisk-headers
      vars:
        REPO_DIR: '{{.REPO_DIR}}'
        DEST_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: native:build-from-{{or .SOURCE_LOCATION "repo"}}
      vars:
        BASEIMG: '{{.IMG_NAME}}'
        PRESET: deb
        BRANCH: '{{.GIT_BRANCH}}'
        IID_FILE: '{{.TMP_DIR}}/img.id'
        ASTERISK_VERSION_NUM: '{{.ASTERISK_VERSION_NUM}}'
        DOCKER_PLATFORM: '{{.DOCKER_PLATFORM}}'
        SOURCES_DIR: '{{.REPO_DIR}}'
        AST_HEADER_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: copy-pkgs
      vars:
        DST_DIR: ''
        DOCKER_IMG:
          sh: cat {{.TMP_DIR}}/img.id
        DOCKER_PLATFORM: '{{.DOCKER_PLATFORM}}'
    - defer: rm -rf {{.TMP_DIR}}
    - defer: docker image rm $(cat {{.TMP_DIR}}/img.id) > /dev/null

  centos:
    desc: Build chan_quectel
    requires:
      vars: [OSNAME, ASTERISK_VERSION_NUM]
    vars:
      TMP_DIR:
        sh: mktemp -d --suffix={{randInt 0 10}}
      GIT_BRANCH:
        sh: git branch --show-current
      REPO_DIR:
        sh: git rev-parse --show-toplevel        
      IMG_NAME: 'asterisk-dev/chan-quectel:{{.OSNAME}}'
    cmds:
    - task: native:build-img
      vars:
        TARGET: chan-quectel
        IMG_NAME: '{{.IMG_NAME}}'
        IID_FILE: '{{.TMP_DIR}}/img-base.id'
    - task: copy-asterisk-headers
      vars:
        REPO_DIR: '{{.REPO_DIR}}'
        DEST_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: native:build-from-{{or .SOURCE_LOCATION "repo"}}
      vars:
        BASEIMG: '{{.IMG_NAME}}'
        BUILDER_DIR: centos
        PRESET: rpm
        BRANCH: '{{.GIT_BRANCH}}'
        IID_FILE: '{{.TMP_DIR}}/img.id'
        ASTERISK_VERSION_NUM: '{{.ASTERISK_VERSION_NUM}}'
        SOURCES_DIR: '{{.REPO_DIR}}'
        AST_HEADER_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: copy-pkgs
      vars:
        DST_DIR: ''
        DOCKER_IMG:
          sh: cat {{.TMP_DIR}}/img.id
    - defer: rm -rf {{.TMP_DIR}}
    - defer: docker image rm $(cat {{.TMP_DIR}}/img.id) > /dev/null    

  armhf:
    desc: Build chan_quectel for ARM
    requires:
      vars: [OSNAME, ASTERISK_VERSION_NUM]
    vars:
      TMP_DIR:
        sh: mktemp -d --suffix={{randInt 0 10}}
      GIT_BRANCH:
        sh: git branch --show-current
      REPO_DIR:
        sh: git rev-parse --show-toplevel        
      IMG_NAME: 'asterisk-dev/chan-quectel:{{.OSNAME}}.cc.armhf'
    cmds:
    - task: cc:build-img
      vars:
        IMG_NAME: '{{.IMG_NAME}}'
        TARGET: chan-quectel-cc
        IID_FILE: '{{.TMP_DIR}}/img-base.id'
        CC_TARGET: armhf
        CC_TOOLCHAIN: arm-linux-gnueabihf
    - task: copy-asterisk-headers
      vars:
        REPO_DIR: '{{.REPO_DIR}}'
        DEST_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: cc:build-from-{{or .SOURCE_LOCATION "repo"}}
      vars:
        BASEIMG: '{{.IMG_NAME}}'
        PRESET: deb
        BRANCH: '{{.GIT_BRANCH}}'
        IID_FILE: '{{.TMP_DIR}}/img.id'
        CC_TARGET: armhf
        CC_TOOLCHAIN: arm-linux-gnueabihf
        ASTERISK_VERSION_NUM: '{{.ASTERISK_VERSION_NUM}}'
        SOURCES_DIR: '{{.REPO_DIR}}'
        AST_HEADER_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: copy-pkgs
      vars:
        DST_DIR: armhf
        DOCKER_IMG:
          sh: cat {{.TMP_DIR}}/img.id
    - defer: rm -rf {{.TMP_DIR}}
    - defer: docker image rm $(cat {{.TMP_DIR}}/img.id) > /dev/null

  armhf-ext:
    desc: Build chan_quectel for ARM using GNU Toolchain
    requires:
      vars: [OSNAME, ASTERISK_VERSION_NUM]
    vars:
      TMP_DIR:
        sh: mktemp -d --suffix={{randInt 0 10}}
      GIT_BRANCH:
        sh: git branch --show-current
      REPO_DIR:
        sh: git rev-parse --show-toplevel        
      IMG_NAME: 'asterisk-dev/chan-quectel:{{.OSNAME}}.cc-ext.armhf'
    cmds:
    - task: cc:build-img
      vars:
        IMG_NAME: '{{.IMG_NAME}}'
        TARGET: chan-quectel-cc-ext
        IID_FILE: '{{.TMP_DIR}}/img-base.id'
        CC_TARGET: armhf
        CC_TOOLCHAIN: arm-none-linux-gnueabihf
    - task: copy-asterisk-headers
      vars:
        REPO_DIR: '{{.REPO_DIR}}'
        DEST_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: cc:build-from-{{or .SOURCE_LOCATION "repo"}}
      vars:
        BASEIMG: '{{.IMG_NAME}}'
        PRESET: deb
        BRANCH: '{{.GIT_BRANCH}}'
        IID_FILE: '{{.TMP_DIR}}/img.id'
        CC_TARGET: armhf
        CC_TOOLCHAIN: arm-none-linux-gnueabihf
        ASTERISK_VERSION_NUM: '{{.ASTERISK_VERSION_NUM}}'
        SOURCES_DIR: '{{.REPO_DIR}}'
        AST_HEADER_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: copy-pkgs
      vars:
        DST_DIR: armhf
        DOCKER_IMG:
          sh: cat {{.TMP_DIR}}/img.id
    - defer: rm -rf {{.TMP_DIR}}
    - defer: docker image rm $(cat {{.TMP_DIR}}/img.id) > /dev/null    

  rpi:
    desc: Build chan_quectel for Raspberry Pi
    requires:
      vars: [OSNAME, ASTERISK_VERSION_NUM, RPI_VERSION]
    vars:
      TMP_DIR:
        sh: mktemp -d --suffix={{randInt 0 10}}
      GIT_BRANCH:
        sh: git branch --show-current
      REPO_DIR:
        sh: git rev-parse --show-toplevel        
      IMG_NAME: 'asterisk-dev/chan-quectel:{{.OSNAME}}.cc.rpi'
    cmds:
    - task: rpi:build-img
      vars:
        IMG_NAME: '{{.IMG_NAME}}'
        TARGET: chan-quectel-rpi
        IID_FILE: '{{.TMP_DIR}}/img-base.id'
        CC_TARGET: armhf
        CC_TOOLCHAIN: arm-linux-gnueabihf
    - task: copy-asterisk-headers
      vars:
        REPO_DIR: '{{.REPO_DIR}}'
        DEST_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: rpi:build-from-{{or .SOURCE_LOCATION "repo"}}
      vars:
        BASEIMG: '{{.IMG_NAME}}'
        PRESET: rpi
        BRANCH: '{{.GIT_BRANCH}}'
        IID_FILE: '{{.TMP_DIR}}/img.id'
        CC_TARGET: armhf
        CC_TOOLCHAIN: arm-linux-gnueabihf
        ASTERISK_VERSION_NUM: '{{.ASTERISK_VERSION_NUM}}'
        SOURCES_DIR: '{{.REPO_DIR}}'
        AST_HEADER_DIR: '{{.TMP_DIR}}/asterisk-headers'
        RPI_VERSION: '{{.RPI_VERSION}}'
    - task: copy-pkgs
      vars:
        DST_DIR: rpi{{.RPI_VERSION}}
        DOCKER_IMG:
          sh: cat {{.TMP_DIR}}/img.id
    - defer: rm -rf {{.TMP_DIR}}
    - defer: docker image rm $(cat {{.TMP_DIR}}/img.id) > /dev/null

  rpi-ext:
    desc: Build chan_quectel for Raspberry Pi using GNU Toolchain
    requires:
      vars: [OSNAME, ASTERISK_VERSION_NUM, RPI_VERSION]
    vars:
      TMP_DIR:
        sh: mktemp -d --suffix={{randInt 0 10}}
      GIT_BRANCH:
        sh: git branch --show-current
      REPO_DIR:
        sh: git rev-parse --show-toplevel
      IMG_NAME: 'asterisk-dev/chan-quectel:{{.OSNAME}}.cc-ext.rpi'
    cmds:
    - task: rpi:build-img
      vars:
        IMG_NAME: '{{.IMG_NAME}}'
        TARGET: chan-quectel-rpi-ext
        IID_FILE: '{{.TMP_DIR}}/img-base.id'
        CC_TARGET: armhf
        CC_TOOLCHAIN: arm-none-linux-gnueabihf
    - task: copy-asterisk-headers
      vars:
        REPO_DIR: '{{.REPO_DIR}}'
        DEST_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: rpi:build-from-{{or .SOURCE_LOCATION "repo"}}
      vars:
        BASEIMG: '{{.IMG_NAME}}'
        PRESET: rpi
        BRANCH: '{{.GIT_BRANCH}}'
        IID_FILE: '{{.TMP_DIR}}/img.id'
        CC_TARGET: armhf
        CC_TOOLCHAIN: arm-none-linux-gnueabihf
        ASTERISK_VERSION_NUM: '{{.ASTERISK_VERSION_NUM}}'
        SOURCES_DIR: '{{.REPO_DIR}}'
        AST_HEADER_DIR: '{{.TMP_DIR}}/asterisk-headers'
        RPI_VERSION: '{{.RPI_VERSION}}'
    - task: copy-pkgs
      vars:
        DST_DIR: rpi{{.RPI_VERSION}}
        DOCKER_IMG:
          sh: cat {{.TMP_DIR}}/img.id
    - defer: rm -rf {{.TMP_DIR}}
    - defer: docker image rm $(cat {{.TMP_DIR}}/img.id) > /dev/null    

  arm64:
    desc: Build chan_quectel for ARM64
    requires:
      vars: [OSNAME, ASTERISK_VERSION_NUM]
    vars:
      TMP_DIR:
        sh: mktemp -d --suffix={{randInt 0 10}}
      GIT_BRANCH:
        sh: git branch --show-current
      REPO_DIR:
        sh: git rev-parse --show-toplevel
      IMG_NAME: 'asterisk-dev/chan-quectel:{{.OSNAME}}.cc.arm64'
    cmds:
    - task: cc:build-img
      vars:
        IMG_NAME: '{{.IMG_NAME}}'
        TARGET: chan-quectel-cc
        IID_FILE: '{{.TMP_DIR}}/img-base.id'
        CC_TARGET: arm64
        CC_TOOLCHAIN: aarch64-linux-gnu
    - task: copy-asterisk-headers
      vars:
        REPO_DIR: '{{.REPO_DIR}}'
        DEST_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: cc:build-from-{{or .SOURCE_LOCATION "repo"}}
      vars:
        BASEIMG: '{{.IMG_NAME}}'
        PRESET: deb
        BRANCH: '{{.GIT_BRANCH}}'
        IID_FILE: '{{.TMP_DIR}}/img.id'
        CC_TARGET: arm64
        CC_TOOLCHAIN: aarch64-linux-gnu
        ASTERISK_VERSION_NUM: '{{.ASTERISK_VERSION_NUM}}'
        SOURCES_DIR: '{{.REPO_DIR}}'
        AST_HEADER_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: copy-pkgs
      vars:
        DST_DIR: arm64
        DOCKER_IMG:
          sh: cat {{.TMP_DIR}}/img.id
    - defer: rm -rf {{.TMP_DIR}}
    - defer: docker image rm $(cat {{.TMP_DIR}}/img.id) > /dev/null

  arm64-ext:
    desc: Build chan_quectel for ARM64 using GNU Toolchain
    requires:
      vars: [OSNAME, ASTERISK_VERSION_NUM]
    vars:
      TMP_DIR:
        sh: mktemp -d --suffix={{randInt 0 10}}
      GIT_BRANCH:
        sh: git branch --show-current
      REPO_DIR:
        sh: git rev-parse --show-toplevel
      IMG_NAME: 'asterisk-dev/chan-quectel:{{.OSNAME}}.cc-ext.arm64'
    cmds:
    - task: cc:build-img
      vars:
        IMG_NAME: '{{.IMG_NAME}}'
        TARGET: chan-quectel-cc-ext
        IID_FILE: '{{.TMP_DIR}}/img-base.id'
        CC_TARGET: arm64
        CC_TOOLCHAIN: aarch64-none-linux-gnu
    - task: copy-asterisk-headers
      vars:
        REPO_DIR: '{{.REPO_DIR}}'
        DEST_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: cc:build-from-{{or .SOURCE_LOCATION "repo"}}
      vars:
        BASEIMG: '{{.IMG_NAME}}'
        PRESET: deb
        BRANCH: '{{.GIT_BRANCH}}'
        IID_FILE: '{{.TMP_DIR}}/img.id'
        CC_TARGET: arm64
        CC_TOOLCHAIN: aarch64-none-linux-gnu
        ASTERISK_VERSION_NUM: '{{.ASTERISK_VERSION_NUM}}'
        SOURCES_DIR: '{{.REPO_DIR}}'
        AST_HEADER_DIR: '{{.TMP_DIR}}/asterisk-headers'
    - task: copy-pkgs
      vars:
        DST_DIR: arm64
        DOCKER_IMG:
          sh: cat {{.TMP_DIR}}/img.id
    - defer: rm -rf {{.TMP_DIR}}
    - defer: docker image rm $(cat {{.TMP_DIR}}/img.id) > /dev/null    

  rm-cpack-dir:
    internal: true
    requires:
      vars: [PKG_DIR]
    status:
    - test ! -d {{.PKG_DIR}}/_CPack_Packages
    cmds:
    - rm -rf {{.PKG_DIR}}/_CPack_Packages

  copy-pkgs:
    desc: Copy packages from Docker image to host
    internal: true
    requires:
      vars: [DOCKER_IMG, DST_DIR]
    vars:
      CONTAINER_ID:
        sh: docker container create {{if .DOCKER_PLATFORM}}--platform {{.DOCKER_PLATFORM}}{{end}} {{.DOCKER_IMG}}
    cmds:
    - mkdir -p package
    - >-
      docker container cp
      {{if .DOCKER_QUIET|default 0|int|ne 0}}-q{{end}}
      {{.CONTAINER_ID}}:/build/chan-quectel/package/.
      package{{if .DST_DIR}}/{{.DST_DIR}}{{end}}
    - defer: docker container rm {{.CONTAINER_ID}} {{if .DOCKER_QUIET|default 0|int|ne 0}}> /dev/null{{end}}
    - task: rm-cpack-dir
      vars:
        PKG_DIR: 'package{{if .DST_DIR}}/{{.DST_DIR}}{{end}}'

version: '3'

output: prefixed

vars:
  BUILD_DIR: /build
  SYSROOT: '{{.BUILD_DIR}}/sysroot'
  RPI_ROOT: '{{.BUILD_DIR}}/cache'

tasks:
  sysroot-lib:
    internal: true
    requires:
      vars: [SYMLINK]
    vars:
      LINK_TARGET:
        sh: readlink -n {{.SYMLINK}}
    silent: true
    cmds: 
      - |
        if [[ "{{.LINK_TARGET}}" = /lib/* ]]; then
          echo {{base .SYMLINK}} ⟶ {{base .LINK_TARGET}}
          ln -fsr {{.SYSROOT}}/usr{{.LINK_TARGET}} {{.SYMLINK}}
        elif [[ "{{.LINK_TARGET}}" = ../../../* ]]; then
          echo {{base .SYMLINK}} ⇒ {{base .LINK_TARGET}}
          ln -fsr {{.SYSROOT}}/usr/lib/{{base .LINK_TARGET}} {{.SYMLINK}}
        fi
  
  fix-lib-symlinks:
    internal: true
    vars:
      SYMLIBS:
        sh: find -P {{.SYSROOT}}/usr/lib -type l -name 'lib*.so*'
    cmds:
      - for: { var: SYMLIBS }
        task: sysroot-lib
        vars:
          SYMLINK: '{{.ITEM}}'

  asterisk-headers:
    desc: Copy Asterisk header files
    preconditions:
      - test -d {{.RPI_ROOT}}
    cmds:
      - mkdir -p {{.BUILD_DIR}}/asterisk-headers
      - cp {{.RPI_ROOT}}/usr/include/asterisk.h {{.BUILD_DIR}}/asterisk-headers
      - cp -r {{.RPI_ROOT}}/usr/include/asterisk {{.BUILD_DIR}}/asterisk-headers

  sysroot:
    desc: Prepare Raspberry Pi SysRoot
    preconditions:
      - test -d {{.RPI_ROOT}}
    cmds:
      - mkdir -p {{.SYSROOT}}/usr
      - cp -a {{.RPI_ROOT}}/usr/lib/arm-linux-gnueabihf {{.SYSROOT}}/usr/
      - mv {{.SYSROOT}}/usr/arm-linux-gnueabihf {{.SYSROOT}}/usr/lib
      - mkdir -p {{.SYSROOT}}/usr/lib/gcc
      - cp -a {{.RPI_ROOT}}/usr/lib/gcc/arm-linux-gnueabihf/*/* {{.SYSROOT}}/usr/lib/gcc
      - mv {{.SYSROOT}}/usr/lib/gcc/*.o {{.SYSROOT}}/usr/lib/
      - cp -a {{.RPI_ROOT}}/usr/include {{.SYSROOT}}/usr/
      - ln -sr {{.SYSROOT}}/usr/lib {{.SYSROOT}}/usr/lib/arm-linux-gnueabihf
      - ln -sr {{.SYSROOT}}/usr/lib {{.SYSROOT}}/lib
      - ln -sr {{.SYSROOT}}/usr/include {{.SYSROOT}}/include
      - task: fix-lib-symlinks

  link-crt-obj:
    internal: true
    requiremets:
      vars: [CRT_OBJ, GCC_DRIVER]
    vars:
      GCC_FILE:
        sh: '{{.GCC_DRIVER}} -print-file-name={{base .CRT_OBJ}}'
    silent: true
    cmds:
      - echo {{base .CRT_OBJ}} ⟶ {{.GCC_FILE}}
      - ln -fsr {{.CRT_OBJ}} {{.GCC_FILE}}

  fix-ext-crt-startup-*:
    desc: Copy crt*.o files from SYSROOT to internal gcc directory
    vars:
      TOOLCHAIN: '{{index .MATCH 0}}'
      CRT_OBJS:
        sh: find {{.SYSROOT}}/usr/lib -type f -name '*crt*.o'
    cmds:
      - for: {var: CRT_OBJS}
        task: link-crt-obj
        vars:
          GCC_DRIVER: '{{.BUILD_DIR}}/arm-gnu-toolchain/{{.TOOLCHAIN}}/bin/{{.TOOLCHAIN}}-gcc'
          CRT_OBJ: '{{.ITEM}}'

  fix-crt-startup-*:
    desc: Copy crt*.o files from SYSROOT to internal gcc directory
    vars:
      TOOLCHAIN: '{{index .MATCH 0}}'
      CRT_OBJS:
        sh: find {{.SYSROOT}}/usr/lib -type f -name '*crt*.o'
    cmds:
      - for: {var: CRT_OBJS}
        task: link-crt-obj
        vars:
          GCC_DRIVER: '{{.TOOLCHAIN}}-gcc'
          CRT_OBJ: '{{.ITEM}}'

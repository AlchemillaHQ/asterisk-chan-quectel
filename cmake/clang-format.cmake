#
# clang-format.cmake
#

FUNCTION(FindClangFormat OutVar)
    UNSET(CLANG_FORMAT_EXE)

    MESSAGE(CHECK_START "Looking for clang-format executable")
    FILE(REAL_PATH "~" HOME_DIR EXPAND_TILDE)
    MESSAGE(STATUS "HOME_DIR: ${HOME_DIR}")
    FOREACH(VSCODE_DIR .vscode .vscode-server)
        CMAKE_PATH(APPEND HOME_DIR ${VSCODE_DIR} extensions OUTPUT_VARIABLE VSCODE_EXTENSIONS_DIR)
        IF(NOT EXISTS ${VSCODE_EXTENSIONS_DIR})
            CONTINUE()
        ENDIF()
        FILE(GLOB CPPTOOLS_DIR "${VSCODE_EXTENSIONS_DIR}/ms-vscode.cpptools*")
        FOREACH(P ${CPPTOOLS_DIR})
            CMAKE_PATH(APPEND P LLVM bin OUTPUT_VARIABLE VSE_BIN_DIR)
            IF(NOT EXISTS ${VSE_BIN_DIR})
                CONTINUE()
            ENDIF()

            FIND_PROGRAM(CLANG_FORMAT_EXE NAME clang-format HINTS ${VSE_BIN_DIR} NO_CACHE NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
            IF(CLANG_FORMAT_EXE)
                MESSAGE(CHECK_PASS "found → ${CLANG_FORMAT_EXE}")
                SET(${OutVar} ${CLANG_FORMAT_EXE} PARENT_SCOPE)
                RETURN()
            ENDIF()
        ENDFOREACH()
    ENDFOREACH()

    FIND_PROGRAM(CLANG_FORMAT_EXE NAME clang-format NO_CACHE NO_CMAKE_FIND_ROOT_PATH)
    IF(CLANG_FORMAT_EXE)
        MESSAGE(CHECK_PASS "found → ${CLANG_FORMAT_EXE}")
        SET(${OutVar} ${CLANG_FORMAT_EXE} PARENT_SCOPE)
    ELSE()
        MESSAGE(CHECK_FAIL "not found")
        SET(${OutVar} ${OutVar}-NOTFOUND PARENT_SCOPE)
    ENDIF()
ENDFUNCTION()

FUNCTION(GetClangFormatVersion CLANG_FORMAT_PATH OutVar)
    MESSAGE(CHECK_START "Getting clang-format version")
    EXECUTE_PROCESS(
        COMMAND ${CLANG_FORMAT_PATH} --version
        OUTPUT_VARIABLE CF_VERSION
        RESULT_VARIABLE CF_ERROR_CODE
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    IF(CF_ERROR_CODE)
        MESSAGE(CHECK_FAIL "fail to execute")
    ENDIF()

    SEPARATE_ARGUMENTS(CF_VERSION)
    LIST(LENGTH CF_VERSION CF_VERSION_CNT)
    IF(${CF_VERSION_CNT} LESS 3)
        MESSAGE(CHECK_FAIL "unexpected output")
        SET("${OutVar}" PARENT_SCOPE)
        RETURN()
    ENDIF()

    LIST(GET CF_VERSION 2 CF_VERSION_NUM)
    IF("${CF_VERSION_NUM}" MATCHES "[0123456789]+\\.[0123456789]+\\.[0123456789]+")
        MESSAGE(CHECK_PASS "${CF_VERSION_NUM}")
        SET("${OutVar}" "${CF_VERSION_NUM}" PARENT_SCOPE)
        RETURN()
    ENDIF()

    MESSAGE(CHECK_FAIL "unexpected version format")
    SET("${OutVar}" PARENT_SCOPE)
ENDFUNCTiON()

FUNCTION(CheckClangFormatVersion CLANG_FORMAT_VERSION EXPECTED_VER_MAJOR OutVar)
    MESSAGE(CHECK_START "Checking clang-format version")
    MATH(EXPR NEXT_MAJOR_VER "${EXPECTED_VER_MAJOR}+1")
    IF(CLANG_FORMAT_VERSION VERSION_GREATER_EQUAL ${EXPECTED_VER_MAJOR} AND CLANG_FORMAT_VERSION VERSION_LESS ${NEXT_MAJOR_VER})
        MESSAGE(CHECK_PASS "OK")
        SET("${OutVar}" TRUE PARENT_SCOPE)
    ELSE()
        MESSAGE(CHECK_FAIL "UNSUPPORTED [${CLANG_FORMAT_VERSION} ≠ ${EXPECTED_VER_MAJOR}]")
        SET("${OutVar}" PARENT_SCOPE)
    ENDIF()
ENDFUNCTION()

FUNCTION(ClangFormatFindAndCheck CLANG_FORMAT_VER)
    IF(NOT CLANG_FORMAT)
        UNSET(CLANG_FORMAT_PATH)
        FindClangFormat(CLANG_FORMAT_PATH)
        SET(CLANG_FORMAT ${CLANG_FORMAT_PATH} CACHE FILEPATH "C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C# code formatter" FORCE)
    ENDIF()
    IF(CLANG_FORMAT)
        UNSET(CLANG_FORMAT_VERSION)
        GetClangFormatVersion(${CLANG_FORMAT} CLANG_FORMAT_VERSION)
        IF(CLANG_FORMAT_VERSION)
            UNSET(VERSION_CHECK)
            CheckClangFormatVersion(${CLANG_FORMAT_VERSION} ${CLANG_FORMAT_VER} VERSION_CHECK)
        ENDIF()
    ENDIF()
ENDFUNCTION()

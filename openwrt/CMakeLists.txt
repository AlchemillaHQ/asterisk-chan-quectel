#
# OpenWRT
#

IF(BUILD_CHAN_QUECTEL_BINARY)
  SET(OPENWRT_INSTALL_FLAGS COMPONENT openwrt EXCLUDE_FROM_ALL)
  MESSAGE(DEBUG "OpenWRT installation flags: ${OPENWRT_INSTALL_FLAGS}")  
ELSE()
  SET(OPENWRT_INSTALL_FLAGS COMPONENT)
  SET(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME openwrt)
ENDIF()

ADD_CUSTOM_TARGET(openwrt COMMENT "Collecting sources of OpenWRT package")
IF(CHECK_SOURCE_DATE_EPOCH)
  ADD_DEPENDENCIES(openwrt check-source-date-epoch)
ENDIF()

IF(DEFINED ASTERISK_VERSION_NUM)
  STRING(SUBSTRING ${ASTERISK_VERSION_NUM} 0 2 ASTERISK_MAJOR_VER)
ELSE()
  MESSAGE(WARNING "ASTERISK_VERSION_NUM variable not defined, assuming version 18 or later")
  SET(ASTERISK_MAJOR_VER 18)
ENDIF()
IF(${ASTERISK_MAJOR_VER} LESS_EQUAL 16)
  SET(ASTERISK_PKG asterisk${ASTERISK_MAJOR_VER})
  SET(PKG_CMAKE_OPTIONS "CMAKE_OPTIONS += -DAST_HEADER_DIR=$(STAGING_DIR)/usr/include/asterisk-${ASTERISK_MAJOR_VER}/include")
  MESSAGE(STATUS "Package options: ${PKG_CMAKE_OPTIONS}")
  CONFIGURE_FILE(diffconfig.in diffconfig-gen @ONLY)
  CMAKE_LANGUAGE(CALL INSTALL
    FILES ${CMAKE_CURRENT_BINARY_DIR}/diffconfig-gen
    DESTINATION openwrt
    RENAME diffconfig
    ${OPENWRT_INSTALL_FLAGS}
  )
ELSE()
  SET(ASTERISK_PKG asterisk)
  UNSET(PKG_CMAKE_OPTIONS)
  MESSAGE(DEBUG "Package options: none")
  CMAKE_LANGUAGE(CALL INSTALL
    FILES diffconfig
    DESTINATION openwrt
    ${OPENWRT_INSTALL_FLAGS}
  )
ENDIF()

CMAKE_LANGUAGE(CALL INSTALL
  FILES readme-package-building.txt
  DESTINATION openwrt
  RENAME README.txt
  ${OPENWRT_INSTALL_FLAGS}
)

CMAKE_LANGUAGE(CALL INSTALL
  PROGRAMS build-opk.sh
  DESTINATION openwrt
  ${OPENWRT_INSTALL_FLAGS}
)

SET(OPENWRT_FEED openwrt/feed/net/${PROJECT_NAME})

IF(BUILD_OPENWRT_MAKEFILE_STANDALONE)
  CMAKE_LANGUAGE(CALL INSTALL
    DIRECTORY ${CMAKE_SOURCE_DIR}/
    DESTINATION ${OPENWRT_FEED}/src
    ${OPENWRT_INSTALL_FLAGS}
    FILES_MATCHING
      PATTERN "*.txt"
      PATTERN "*.md"
      PATTERN "*.conf"
      PATTERN "*.c"
      PATTERN "*.h"
      PATTERN "*.in"
      PATTERN "*.cmake"
      PATTERN "pkg-vars.cmake.in" EXCLUDE
      PATTERN "build" EXCLUDE
      PATTERN "openwrt" EXCLUDE
      PATTERN "test" EXCLUDE
      PATTERN "tools" EXCLUDE
      PATTERN "install" EXCLUDE
      PATTERN "package" EXCLUDE
      PATTERN "docker" EXCLUDE
      PATTERN "cmake/toolchain" EXCLUDE
      PATTERN "etc" EXCLUDE
      PATTERN "uac" EXCLUDE
      PATTERN "doc" EXCLUDE
      PATTERN "cpack" EXCLUDE
      PATTERN ".git" EXCLUDE
      PATTERN ".github" EXCLUDE
      PATTERN ".vscode" EXCLUDE
      PATTERN ".devcontainer" EXCLUDE
      PATTERN "configure-*.cmake" EXCLUDE
      PATTERN "make-*.cmake" EXCLUDE
      PATTERN "install-*.cmake" EXCLUDE
      PATTERN "build-*.cmake" EXCLUDE
      PATTERN "*.toolchain.cmake" EXCLUDE
      PATTERN ".clang-format" EXCLUDE
      PATTERN "diffconfig.in" EXCLUDE
      PATTERN "get-build-flags.sh" EXCLUDE
  )

  CONFIGURE_FILE(pkg-vars.cmake.in pkg-vars.cmake @ONLY)

  CMAKE_LANGUAGE(CALL INSTALL
    FILES ${CMAKE_CURRENT_BINARY_DIR}/pkg-vars.cmake
    DESTINATION ${OPENWRT_FEED}/src
    ${OPENWRT_INSTALL_FLAGS}
  )

  CONFIGURE_FILE(makefile-standalone.in Makefile-opkg @ONLY)

  CMAKE_LANGUAGE(CALL INSTALL
    FILES ${CMAKE_CURRENT_BINARY_DIR}/Makefile-opkg
    DESTINATION ${OPENWRT_FEED}
    RENAME Makefile
    ${OPENWRT_INSTALL_FLAGS}
  )

ELSE()
  CONFIGURE_FILE(makefile-git.in Makefile-opkg @ONLY)

  CMAKE_LANGUAGE(CALL INSTALL
    FILES ${CMAKE_CURRENT_BINARY_DIR}/Makefile-opkg
    DESTINATION ${OPENWRT_FEED}
    RENAME Makefile
    ${OPENWRT_INSTALL_FLAGS}
  )
ENDIF()

CMAKE_LANGUAGE(CALL INSTALL
  SCRIPT make-feeds-conf.cmake
  ${OPENWRT_INSTALL_FLAGS}
)
